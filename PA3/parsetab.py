
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '25DE24B47A8C99D2D11AAD7C73543406'
    
_lr_action_items = {'inherits':([5,],[9,]),'fi':([38,41,44,48,53,57,59,60,63,83,86,87,89,90,91,92,94,96,109,117,120,123,131,135,137,146,],[-55,-52,-53,-54,-51,-45,-40,-39,-49,-50,-47,-44,-48,-42,-46,-41,-43,-38,-24,-27,-26,131,-25,-17,-30,-35,]),'false':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'rbrace':([14,17,19,20,24,38,41,44,48,53,57,59,60,63,83,85,86,87,89,90,91,92,94,96,104,105,109,113,117,118,120,128,131,135,137,146,],[-1,21,-9,-1,-8,-55,-52,-53,-54,-51,-45,-40,-39,-49,-50,-1,-47,-44,-48,-42,-46,-41,-43,-38,-29,117,-24,122,-27,-1,-26,-28,-25,-17,-30,-35,]),'in':([32,38,41,44,48,51,53,57,59,60,63,83,86,87,89,90,91,92,94,96,102,109,115,117,120,125,126,131,135,137,139,141,145,146,],[-32,-55,-52,-53,-54,-31,-51,-45,-40,-39,-49,-50,-47,-44,-48,-42,-46,-41,-43,-38,-1,-24,-1,-27,-26,133,-34,-25,-17,-30,-1,-1,-33,-35,]),'colon':([18,27,33,61,103,132,143,],[22,34,54,82,116,136,147,]),'at':([38,41,44,48,51,53,57,58,59,60,62,63,64,65,76,83,86,87,89,90,91,92,94,96,99,101,106,108,109,113,117,120,121,123,131,135,137,138,146,150,],[-55,-52,-53,-54,74,-51,74,74,74,-39,74,74,74,74,74,-50,74,74,74,74,74,74,74,74,74,74,74,74,-24,74,-27,-26,74,74,-25,-17,74,74,-35,74,]),'tilde':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'if':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'le':([38,41,44,48,51,53,57,58,59,60,62,63,64,65,76,83,86,87,89,90,91,92,94,96,99,101,106,108,109,113,117,120,121,123,131,135,137,138,146,150,],[-55,-52,-53,-54,66,-51,-45,66,-40,-39,66,66,66,66,66,-50,None,-44,None,-42,None,-41,-43,66,66,66,66,66,-24,66,-27,-26,66,66,-25,-17,66,66,-35,66,]),'divide':([38,41,44,48,51,53,57,58,59,60,62,63,64,65,76,83,86,87,89,90,91,92,94,96,99,101,106,108,109,113,117,120,121,123,131,135,137,138,146,150,],[-55,-52,-53,-54,67,-51,-45,67,-40,-39,67,67,67,67,67,-50,67,-44,67,67,67,67,-43,67,67,67,67,67,-24,67,-27,-26,67,67,-25,-17,67,67,-35,67,]),'rarrow':([127,148,],[134,149,]),'isvoid':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'larrow':([25,53,102,139,],[30,77,30,30,]),'lt':([38,41,44,48,51,53,57,58,59,60,62,63,64,65,76,83,86,87,89,90,91,92,94,96,99,101,106,108,109,113,117,120,121,123,131,135,137,138,146,150,],[-55,-52,-53,-54,71,-51,-45,71,-40,-39,71,71,71,71,71,-50,None,-44,None,-42,None,-41,-43,71,71,71,71,71,-24,71,-27,-26,71,71,-25,-17,71,71,-35,71,]),'esac':([140,142,144,151,152,],[-1,146,-37,-1,-36,]),'new':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'type':([3,9,22,34,43,54,74,82,116,136,147,],[5,13,25,55,60,79,93,102,127,139,148,]),'$end':([2,4,6,8,12,15,],[0,-1,-2,-4,-1,-3,]),'then':([38,41,44,48,53,57,58,59,60,63,83,86,87,89,90,91,92,94,96,109,117,120,131,135,137,146,],[-55,-52,-53,-54,-51,-45,81,-40,-39,-49,-50,-47,-44,-48,-42,-46,-41,-43,-38,-24,-27,-26,-25,-17,-30,-35,]),'string':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'equals':([38,41,44,48,51,53,57,58,59,60,62,63,64,65,76,83,86,87,89,90,91,92,94,96,99,101,106,108,109,113,117,120,121,123,131,135,137,138,146,150,],[-55,-52,-53,-54,69,-51,-45,69,-40,-39,69,69,69,69,69,-50,None,-44,None,-42,None,-41,-43,69,69,69,69,69,-24,69,-27,-26,69,69,-25,-17,69,69,-35,69,]),'else':([38,41,44,48,53,57,59,60,63,83,86,87,89,90,91,92,94,96,101,109,117,120,131,135,137,146,],[-55,-52,-53,-54,-51,-45,-40,-39,-49,-50,-47,-44,-48,-42,-46,-41,-43,-38,114,-24,-27,-26,-25,-17,-30,-35,]),'let':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'lparen':([18,30,39,40,42,46,47,49,50,52,53,66,67,69,70,71,73,75,77,78,81,85,95,100,107,112,114,118,119,133,134,149,],[23,46,46,46,46,46,46,46,46,46,78,46,46,46,46,46,46,46,46,46,46,46,46,46,119,46,46,46,46,46,46,46,]),'not':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'integer':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'true':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'class':([0,4,12,],[3,3,3,]),'pool':([38,41,44,48,53,57,59,60,63,83,86,87,89,90,91,92,94,96,108,109,117,120,131,135,137,146,],[-55,-52,-53,-54,-51,-45,-40,-39,-49,-50,-47,-44,-48,-42,-46,-41,-43,-38,120,-24,-27,-26,-25,-17,-30,-35,]),'case':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'lbrace':([5,10,11,13,30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,79,81,85,95,100,112,114,118,119,133,134,149,],[-1,14,-7,-6,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,100,50,50,50,50,50,50,50,50,50,50,50,]),'rparen':([23,26,28,29,35,37,38,41,44,48,53,55,56,57,59,60,62,63,78,80,83,86,87,89,90,91,92,94,96,97,98,99,109,110,111,117,119,120,121,129,130,131,135,137,146,],[-1,33,-12,-1,-11,-14,-55,-52,-53,-54,-51,-16,-1,-45,-40,-39,83,-49,-1,-13,-50,-47,-44,-48,-42,-46,-41,-43,-38,109,-21,-1,-24,-20,-23,-27,-1,-26,-1,135,-22,-25,-17,-30,-35,]),'semi':([1,7,16,21,25,31,32,38,41,44,48,51,53,57,59,60,63,65,83,86,87,89,90,91,92,94,96,106,109,117,120,122,131,135,137,138,146,150,],[4,12,20,-5,-1,-15,-32,-55,-52,-53,-54,-31,-51,-45,-40,-39,-49,85,-50,-47,-44,-48,-42,-46,-41,-43,-38,118,-24,-27,-26,-10,-25,-17,-30,140,-35,151,]),'of':([38,41,44,48,53,57,59,60,63,64,83,86,87,89,90,91,92,94,96,109,117,120,131,135,137,146,],[-55,-52,-53,-54,-51,-45,-40,-39,-49,84,-50,-47,-44,-48,-42,-46,-41,-43,-38,-24,-27,-26,-25,-17,-30,-35,]),'times':([38,41,44,48,51,53,57,58,59,60,62,63,64,65,76,83,86,87,89,90,91,92,94,96,99,101,106,108,109,113,117,120,121,123,131,135,137,138,146,150,],[-55,-52,-53,-54,75,-51,-45,75,-40,-39,75,75,75,75,75,-50,75,-44,75,75,75,75,-43,75,75,75,75,75,-24,75,-27,-26,75,75,-25,-17,75,75,-35,75,]),'while':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'plus':([38,41,44,48,51,53,57,58,59,60,62,63,64,65,76,83,86,87,89,90,91,92,94,96,99,101,106,108,109,113,117,120,121,123,131,135,137,138,146,150,],[-55,-52,-53,-54,73,-51,-45,73,-40,-39,73,73,73,73,73,-50,73,-44,73,-42,73,-41,-43,73,73,73,73,73,-24,73,-27,-26,73,73,-25,-17,73,73,-35,73,]),'dot':([38,41,44,48,51,53,57,58,59,60,62,63,64,65,68,72,76,83,86,87,89,90,91,92,93,94,96,99,101,106,108,109,111,113,117,120,121,123,131,135,137,138,146,150,],[-55,-52,-53,-54,-1,-51,-1,-1,-1,-39,-1,-1,-1,-1,88,-19,-1,-50,-1,-1,-1,-1,-1,-1,-18,-1,-1,-1,-1,-1,-1,-24,-19,-1,-27,-26,-1,-1,-25,-17,-1,-1,-35,-1,]),'comma':([29,32,38,41,44,48,51,53,55,56,57,59,60,63,83,86,87,89,90,91,92,94,96,99,102,109,115,117,120,121,131,135,137,139,141,146,],[36,-32,-55,-52,-53,-54,-31,-51,-16,36,-45,-40,-39,-49,-50,-47,-44,-48,-42,-46,-41,-43,-38,112,-1,-24,124,-27,-26,112,-25,-17,-30,-1,124,-35,]),'identifier':([14,20,23,30,36,39,40,42,45,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,84,85,88,95,100,112,114,118,119,124,133,134,140,149,151,],[18,18,27,53,27,53,53,53,61,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,103,53,107,53,53,53,53,53,53,132,53,53,143,53,143,]),'minus':([38,41,44,48,51,53,57,58,59,60,62,63,64,65,76,83,86,87,89,90,91,92,94,96,99,101,106,108,109,113,117,120,121,123,131,135,137,138,146,150,],[-55,-52,-53,-54,70,-51,-45,70,-40,-39,70,70,70,70,70,-50,70,-44,70,-42,70,-41,-43,70,70,70,70,70,-24,70,-27,-26,70,70,-25,-17,70,70,-35,70,]),'loop':([38,41,44,48,53,57,59,60,63,76,83,86,87,89,90,91,92,94,96,109,117,120,131,135,137,146,],[-55,-52,-53,-54,-51,-45,-40,-39,-49,95,-50,-47,-44,-48,-42,-46,-41,-43,-38,-24,-27,-26,-25,-17,-30,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'caselist':([140,151,],[142,152,]),'blocklist':([85,118,],[105,128,]),'classlist':([4,12,],[6,15,]),'formallist':([29,56,],[35,80,]),'optinherits':([5,],[10,]),'classdef':([0,4,12,],[1,7,7,]),'funclist':([99,121,],[110,130,]),'feature':([14,20,],[16,16,]),'formalargs':([23,],[26,]),'program':([0,],[2,]),'featurelist':([14,20,],[17,24,]),'expr':([30,39,40,42,46,47,49,50,52,66,67,69,70,71,73,75,77,78,81,85,95,100,112,114,118,119,133,134,149,],[51,57,58,59,62,63,64,65,76,86,87,89,90,91,92,94,96,99,101,106,108,113,121,123,106,99,137,138,150,]),'optinit':([25,102,139,],[31,115,141,]),'opttype':([51,57,58,59,62,63,64,65,76,86,87,89,90,91,92,94,96,99,101,106,108,113,121,123,137,138,150,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'letlist':([115,141,],[125,145,]),'funcargs':([78,119,],[97,129,]),'empty':([4,5,12,14,20,23,25,29,51,56,57,58,59,62,63,64,65,76,78,85,86,87,89,90,91,92,94,96,99,101,102,106,108,113,115,118,119,121,123,137,138,139,140,141,150,151,],[8,11,8,19,19,28,32,37,72,37,72,72,72,72,72,72,72,72,98,104,72,72,72,72,72,72,72,72,111,72,32,72,72,72,126,104,98,111,72,72,72,32,144,126,72,144,]),'formal':([23,36,],[29,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','main.py',26),
  ('program -> classdef semi classlist','program',3,'p_program','main.py',31),
  ('classlist -> classdef semi classlist','classlist',3,'p_classlist_head','main.py',35),
  ('classlist -> empty','classlist',1,'p_classlist_tail','main.py',39),
  ('classdef -> class type optinherits lbrace featurelist rbrace','classdef',6,'p_classdef','main.py',45),
  ('optinherits -> inherits type','optinherits',2,'p_optinherits_nonempty','main.py',52),
  ('optinherits -> empty','optinherits',1,'p_optinherits_empty','main.py',56),
  ('featurelist -> feature semi featurelist','featurelist',3,'p_featurelist_head','main.py',61),
  ('featurelist -> empty','featurelist',1,'p_featurelist_tail','main.py',65),
  ('feature -> identifier lparen formalargs rparen colon type lbrace expr rbrace','feature',9,'p_feature_method','main.py',69),
  ('formalargs -> formal formallist','formalargs',2,'p_formalargs_first','main.py',77),
  ('formalargs -> empty','formalargs',1,'p_formalargs_empty','main.py',81),
  ('formallist -> comma formal formallist','formallist',3,'p_formallist_head','main.py',85),
  ('formallist -> empty','formallist',1,'p_formallist_tail','main.py',89),
  ('feature -> identifier colon type optinit','feature',4,'p_feature_field','main.py',93),
  ('formal -> identifier colon type','formal',3,'p_formal','main.py',100),
  ('expr -> expr opttype dot identifier lparen funcargs rparen','expr',7,'p_expression_dispatch','main.py',108),
  ('opttype -> at type','opttype',2,'p_opttype_nonempty','main.py',132),
  ('opttype -> empty','opttype',1,'p_opttype_empty','main.py',136),
  ('funcargs -> expr funclist','funcargs',2,'p_funcargs_first','main.py',140),
  ('funcargs -> empty','funcargs',1,'p_funcargs_empty','main.py',144),
  ('funclist -> comma expr funclist','funclist',3,'p_funclist_head','main.py',148),
  ('funclist -> empty','funclist',1,'p_funclist_tail','main.py',152),
  ('expr -> identifier lparen funcargs rparen','expr',4,'p_expression_selfdispatch','main.py',158),
  ('expr -> if expr then expr else expr fi','expr',7,'p_expression_if','main.py',171),
  ('expr -> while expr loop expr pool','expr',5,'p_expression_while','main.py',179),
  ('expr -> lbrace expr semi blocklist rbrace','expr',5,'p_expression_block','main.py',188),
  ('blocklist -> expr semi blocklist','blocklist',3,'p_blocklist_head','main.py',195),
  ('blocklist -> empty','blocklist',1,'p_blocklist_tail','main.py',199),
  ('expr -> let identifier colon type optinit letlist in expr','expr',8,'p_expression_let','main.py',205),
  ('optinit -> larrow expr','optinit',2,'p_optinit_nonempty','main.py',217),
  ('optinit -> empty','optinit',1,'p_optinit_empty','main.py',221),
  ('letlist -> comma identifier colon type optinit letlist','letlist',6,'p_letlist_head','main.py',225),
  ('letlist -> empty','letlist',1,'p_letlist_tail','main.py',232),
  ('expr -> case expr of identifier colon type rarrow expr semi caselist esac','expr',11,'p_expression_case','main.py',238),
  ('caselist -> identifier colon type rarrow expr semi caselist','caselist',7,'p_caselist_head','main.py',248),
  ('caselist -> empty','caselist',1,'p_caselist_tail','main.py',254),
  ('expr -> identifier larrow expr','expr',3,'p_expression_assign','main.py',260),
  ('expr -> new type','expr',2,'p_expression_newtype','main.py',264),
  ('expr -> isvoid expr','expr',2,'p_expression_isvoid','main.py',268),
  ('expr -> expr plus expr','expr',3,'p_expression_plus','main.py',272),
  ('expr -> expr minus expr','expr',3,'p_expression_minus','main.py',279),
  ('expr -> expr times expr','expr',3,'p_expression_times','main.py',286),
  ('expr -> expr divide expr','expr',3,'p_expression_divide','main.py',293),
  ('expr -> tilde expr','expr',2,'p_expression_negate','main.py',300),
  ('expr -> expr lt expr','expr',3,'p_expression_lt','main.py',307),
  ('expr -> expr le expr','expr',3,'p_expression_lte','main.py',314),
  ('expr -> expr equals expr','expr',3,'p_expression_equals','main.py',321),
  ('expr -> not expr','expr',2,'p_expression_not','main.py',328),
  ('expr -> lparen expr rparen','expr',3,'p_expression_paren','main.py',335),
  ('expr -> identifier','expr',1,'p_expression_id','main.py',339),
  ('expr -> integer','expr',1,'p_expression_integer','main.py',346),
  ('expr -> string','expr',1,'p_expression_string','main.py',352),
  ('expr -> true','expr',1,'p_expression_true','main.py',358),
  ('expr -> false','expr',1,'p_expression_false','main.py',364),
]

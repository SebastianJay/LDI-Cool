	.file	"internals.c"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"%lld"
	.section	.text.unlikely,"ax",@progbits
.LCOLDB1:
	.text
.LHOTB1:
	.p2align 4,,15
	.globl	in_int
	.type	in_int, @function
in_int:
.LFB62:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	movl	$4096, %edi
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movl	$8192, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	subq	$4128, %rsp
	.cfi_def_cfa_offset 4176
	leaq	16(%rsp), %r12
	movq	$0, 8(%rsp)
	movq	%fs:40, %rax
	movq	%rax, 4120(%rsp)
	xorl	%eax, %eax
	call	malloc
	movl	$512, %ecx
	movq	%rax, %rbx
	movq	%r12, %rdi
	xorl	%eax, %eax
	rep stosq
	jmp	.L8
	.p2align 4,,10
	.p2align 3
.L16:
	movslq	%r13d, %r13
	leaq	-1(%rbx,%r13), %rax
	cmpb	$10, (%rax)
	je	.L15
	movq	%rbp, %rdi
	addq	$4096, %rbp
	call	malloc
	movq	%rbx, %rsi
	movq	%rax, %r13
	movq	%rax, %rdi
	call	strcpy
	movq	%rbx, %rdi
	movq	%r13, %rbx
	call	free
.L8:
	movq	stdin(%rip), %rdx
	movq	%r12, %rdi
	movl	$4096, %esi
	call	fgets
	movq	%rbx, %rdi
.L2:
	movl	(%rdi), %edx
	addq	$4, %rdi
	leal	-16843009(%rdx), %eax
	notl	%edx
	andl	%edx, %eax
	andl	$-2139062144, %eax
	je	.L2
	movl	%eax, %edx
	movq	%r12, %rsi
	shrl	$16, %edx
	testl	$32896, %eax
	cmove	%edx, %eax
	leaq	2(%rdi), %rdx
	movl	%eax, %ecx
	cmove	%rdx, %rdi
	addb	%al, %cl
	sbbq	$3, %rdi
	call	stpcpy
	subq	%rbx, %rax
	testl	%eax, %eax
	movq	%rax, %r13
	movl	%eax, %r14d
	je	.L4
	movq	stdin(%rip), %rdi
	call	feof
	testl	%eax, %eax
	je	.L16
.L7:
	leaq	8(%rsp), %rdx
	xorl	%eax, %eax
	movl	$.LC0, %esi
	movq	%rbx, %rdi
	call	__isoc99_sscanf
	addl	$1, %eax
	cmpl	$1, %eax
	jbe	.L4
	movq	8(%rsp), %rax
	movl	$2147483648, %edx
	movl	$4294967295, %ecx
	addq	%rax, %rdx
	cmpq	%rcx, %rdx
	ja	.L4
.L9:
	movq	4120(%rsp), %rcx
	xorq	%fs:40, %rcx
	jne	.L17
	addq	$4128, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4:
	.cfi_restore_state
	xorl	%eax, %eax
	jmp	.L9
	.p2align 4,,10
	.p2align 3
.L15:
	cmpl	$1, %r14d
	movb	$0, (%rax)
	jle	.L7
	leaq	-2(%rbx,%r13), %rax
	cmpb	$13, (%rax)
	jne	.L7
	movb	$0, (%rax)
	jmp	.L7
.L17:
	call	__stack_chk_fail
	.cfi_endproc
.LFE62:
	.size	in_int, .-in_int
	.section	.text.unlikely
.LCOLDE1:
	.text
.LHOTE1:
	.section	.text.unlikely
.LCOLDB2:
	.text
.LHOTB2:
	.p2align 4,,15
	.globl	IO.in_int
	.type	IO.in_int, @function
IO.in_int:
.LFB61:
	.cfi_startproc
	xorl	%eax, %eax
	jmp	in_int
	.cfi_endproc
.LFE61:
	.size	IO.in_int, .-IO.in_int
	.section	.text.unlikely
.LCOLDE2:
	.text
.LHOTE2:
	.section	.rodata.str1.1
.LC3:
	.string	"%d"
	.section	.text.unlikely
.LCOLDB4:
	.text
.LHOTB4:
	.p2align 4,,15
	.globl	IO.out_int
	.type	IO.out_int, @function
IO.out_int:
.LFB63:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movl	%esi, %edx
	movq	%rdi, %rbx
	movl	$.LC3, %esi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE63:
	.size	IO.out_int, .-IO.out_int
	.section	.text.unlikely
.LCOLDE4:
	.text
.LHOTE4:
	.section	.text.unlikely
.LCOLDB5:
	.text
.LHOTB5:
	.p2align 4,,15
	.globl	out_int
	.type	out_int, @function
out_int:
.LFB64:
	.cfi_startproc
	movl	%edi, %edx
	movl	$.LC3, %esi
	movl	$1, %edi
	xorl	%eax, %eax
	jmp	__printf_chk
	.cfi_endproc
.LFE64:
	.size	out_int, .-out_int
	.section	.text.unlikely
.LCOLDE5:
	.text
.LHOTE5:
	.section	.rodata.str1.1
.LC6:
	.string	""
	.section	.text.unlikely
.LCOLDB7:
	.text
.LHOTB7:
	.p2align 4,,15
	.globl	in_string
	.type	in_string, @function
in_string:
.LFB66:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	movl	$4096, %edi
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movl	$4096, %r13d
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	xorl	%ebp, %ebp
	xorl	%ebx, %ebx
	call	malloc
	movq	%rax, %r12
	jmp	.L23
	.p2align 4,,10
	.p2align 3
.L30:
	addq	$1, %rbx
.L23:
	movq	stdin(%rip), %rdi
	call	fgetc
	cmpl	$-1, %eax
	je	.L37
	testl	%eax, %eax
	je	.L28
	cmpl	$10, %eax
	je	.L38
	leal	-1(%r13), %edx
	addl	$1, %ebp
	movb	%al, (%r12,%rbx)
	cmpl	%edx, %ebp
	jne	.L30
	addl	$4096, %r13d
	movb	$0, 1(%r12,%rbx)
	movslq	%r13d, %rdi
	call	malloc
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	strcpy
	movq	%r12, %rdi
	movq	%r14, %r12
	call	free
	jmp	.L30
	.p2align 4,,10
	.p2align 3
.L39:
	cmpl	$10, %eax
	je	.L25
.L28:
	movq	stdin(%rip), %rdi
	call	fgetc
	cmpl	$-1, %eax
	jne	.L39
.L25:
	movl	$.LC6, %eax
.L26:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L37:
	.cfi_restore_state
	testl	%ebp, %ebp
	je	.L25
.L31:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	movq	%r12, %rax
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L38:
	.cfi_restore_state
	movslq	%ebp, %rax
	testl	%ebp, %ebp
	movb	$0, (%r12,%rax)
	je	.L31
	leaq	-1(%r12,%rax), %rdx
	movq	%r12, %rax
	cmpb	$13, (%rdx)
	jne	.L26
	movb	$0, (%rdx)
	jmp	.L26
	.cfi_endproc
.LFE66:
	.size	in_string, .-in_string
	.section	.text.unlikely
.LCOLDE7:
	.text
.LHOTE7:
	.section	.rodata.str1.1
.LC8:
	.string	"%s"
	.section	.text.unlikely
.LCOLDB9:
	.text
.LHOTB9:
	.p2align 4,,15
	.globl	out_string
	.type	out_string, @function
out_string:
.LFB68:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movq	%rdi, %r13
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	call	strlen
	leal	1(%rax), %edi
	movq	%rax, %r12
	movl	%eax, %ebx
	movslq	%edi, %rdi
	call	malloc
	leaq	1(%r12), %rdx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbp
	call	memcpy
	xorl	%r8d, %r8d
	cmpl	$1, %r12d
	leaq	2(%rbp), %rdi
	movl	$1, %esi
	jg	.L50
	jmp	.L46
	.p2align 4,,10
	.p2align 3
.L42:
	addq	$1, %rsi
	addq	$1, %rdi
	cmpl	%esi, %ebx
	jle	.L46
.L50:
	cmpb	$92, -2(%rdi)
	movl	%esi, %eax
	jne	.L42
	movzbl	-1(%rdi), %edx
	cmpb	$116, %dl
	je	.L48
	cmpb	$110, %dl
	jne	.L42
	movl	$10, %r9d
.L43:
	movl	%ebx, %edx
	subl	%r8d, %edx
	cmpl	%eax, %edx
	jle	.L47
	subl	%esi, %edx
	leal	-1(%rdx), %eax
	leaq	2(%rsi,%rax), %rcx
	movq	%rdi, %rax
	addq	%rbp, %rcx
	.p2align 4,,10
	.p2align 3
.L44:
	movzbl	(%rax), %edx
	addq	$1, %rax
	movb	%dl, -2(%rax)
	cmpq	%rcx, %rax
	jne	.L44
.L47:
	addq	$1, %rsi
	movb	%r9b, -2(%rdi)
	addl	$1, %r8d
	addq	$1, %rdi
	cmpl	%esi, %ebx
	jg	.L50
.L46:
	movq	%rbp, %rdx
	movl	$1, %edi
	movl	$.LC8, %esi
	xorl	%eax, %eax
	call	__printf_chk
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	movq	%rbp, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	jmp	free
	.p2align 4,,10
	.p2align 3
.L48:
	.cfi_restore_state
	movl	$9, %r9d
	jmp	.L43
	.cfi_endproc
.LFE68:
	.size	out_string, .-out_string
	.section	.text.unlikely
.LCOLDE9:
	.text
.LHOTE9:
	.section	.text.unlikely
.LCOLDB10:
	.text
.LHOTB10:
	.p2align 4,,15
	.globl	IO.out_string
	.type	IO.out_string, @function
IO.out_string:
.LFB67:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	%rdi, %rbx
	movq	24(%rsi), %rdi
	call	out_string
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE67:
	.size	IO.out_string, .-IO.out_string
	.section	.text.unlikely
.LCOLDE10:
	.text
.LHOTE10:
	.section	.text.unlikely
.LCOLDB11:
	.text
.LHOTB11:
	.p2align 4,,15
	.globl	out_error
	.type	out_error, @function
out_error:
.LFB69:
	.cfi_startproc
	movq	%rsi, %rdx
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	%rdi, %rsi
	xorl	%eax, %eax
	movl	$1, %edi
	call	__printf_chk
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE69:
	.size	out_error, .-out_error
	.section	.text.unlikely
.LCOLDE11:
	.text
.LHOTE11:
	.section	.rodata.str1.1
.LC12:
	.string	"abort\n"
	.section	.text.unlikely
.LCOLDB13:
	.text
.LHOTB13:
	.p2align 4,,15
	.globl	Object.abort
	.type	Object.abort, @function
Object.abort:
.LFB71:
	.cfi_startproc
	movl	$.LC12, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	call	out_string
	xorl	%edi, %edi
	call	exit
	.cfi_endproc
.LFE71:
	.size	Object.abort, .-Object.abort
	.section	.text.unlikely
.LCOLDE13:
	.text
.LHOTE13:
	.section	.text.unlikely
.LCOLDB14:
	.text
.LHOTB14:
	.p2align 4,,15
	.globl	Object.cmp
	.type	Object.cmp, @function
Object.cmp:
.LFB74:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L68
	testq	%rsi, %rsi
	je	.L68
	movq	(%rdi), %rdx
	cmpq	(%rsi), %rdx
	movl	$1, %eax
	je	.L74
	ret
	.p2align 4,,10
	.p2align 3
.L74:
	cmpq	$1, %rdx
	je	.L70
	cmpq	$4, %rdx
	je	.L70
	cmpq	$2, %rdx
	je	.L75
.L68:
	xorl	%eax, %eax
	cmpq	%rsi, %rdi
	setne	%al
	ret
	.p2align 4,,10
	.p2align 3
.L70:
	movq	24(%rdi), %rax
	subq	24(%rsi), %rax
	ret
	.p2align 4,,10
	.p2align 3
.L75:
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	24(%rsi), %rsi
	movq	24(%rdi), %rdi
	call	strcmp
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	cltq
	ret
	.cfi_endproc
.LFE74:
	.size	Object.cmp, .-Object.cmp
	.section	.text.unlikely
.LCOLDE14:
	.text
.LHOTE14:
	.section	.text.unlikely
.LCOLDB15:
	.text
.LHOTB15:
	.p2align 4,,15
	.globl	String.length
	.type	String.length, @function
String.length:
.LFB76:
	.cfi_startproc
	movq	24(%rdi), %rdi
	jmp	strlen
	.cfi_endproc
.LFE76:
	.size	String.length, .-String.length
	.section	.text.unlikely
.LCOLDE15:
	.text
.LHOTE15:
	.section	.text.unlikely
.LCOLDB16:
	.text
.LHOTB16:
	.p2align 4,,15
	.globl	String.cmp
	.type	String.cmp, @function
String.cmp:
.LFB79:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	24(%rsi), %rsi
	movq	24(%rdi), %rdi
	call	strcmp
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	cltq
	ret
	.cfi_endproc
.LFE79:
	.size	String.cmp, .-String.cmp
	.section	.text.unlikely
.LCOLDE16:
	.text
.LHOTE16:
	.section	.text.unlikely
.LCOLDB17:
	.text
.LHOTB17:
	.p2align 4,,15
	.globl	getmem
	.type	getmem, @function
getmem:
.LFB82:
	.cfi_startproc
	movq	HEAP_NEXT(%rip), %rax
	leaq	(%rax,%rdi), %rdx
	cmpq	HEAP_END(%rip), %rdx
	movq	%rdx, HEAP_NEXT(%rip)
	jnb	.L84
	ret
	.p2align 4,,10
	.p2align 3
.L84:
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	%rdi, %rbx
	movl	$4194304, %edi
	call	malloc
	leaq	(%rax,%rbx), %rdi
	leaq	4194304(%rax), %rdx
	popq	%rbx
	.cfi_restore 3
	.cfi_def_cfa_offset 8
	movq	%rdx, HEAP_END(%rip)
	movq	%rdi, HEAP_NEXT(%rip)
	ret
	.cfi_endproc
.LFE82:
	.size	getmem, .-getmem
	.section	.text.unlikely
.LCOLDE17:
	.text
.LHOTE17:
	.section	.text.unlikely
.LCOLDB18:
	.text
.LHOTB18:
	.p2align 4,,15
	.globl	IO.new
	.type	IO.new, @function
IO.new:
.LFB60:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$24, %edi
	call	getmem
	movq	$3, (%rax)
	movq	$IO_vtable, 8(%rax)
	movq	$0, 16(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE60:
	.size	IO.new, .-IO.new
	.section	.text.unlikely
.LCOLDE18:
	.text
.LHOTE18:
	.section	.text.unlikely
.LCOLDB19:
	.text
.LHOTB19:
	.p2align 4,,15
	.globl	Object.new
	.type	Object.new, @function
Object.new:
.LFB70:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$24, %edi
	call	getmem
	movq	$0, (%rax)
	movq	$Object_vtable, 8(%rax)
	movq	$0, 16(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE70:
	.size	Object.new, .-Object.new
	.section	.text.unlikely
.LCOLDE19:
	.text
.LHOTE19:
	.section	.text.unlikely
.LCOLDB20:
	.text
.LHOTB20:
	.p2align 4,,15
	.globl	Object.copy
	.type	Object.copy, @function
Object.copy:
.LFB73:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	16(%rdi), %rax
	movq	%rdi, %rbx
	leaq	24(,%rax,8), %rdi
	call	getmem
	movq	(%rbx), %rdx
	movq	%rdx, (%rax)
	movq	8(%rbx), %rdx
	movq	%rdx, 8(%rax)
	movq	16(%rbx), %rdx
	movq	%rdx, 16(%rax)
	cmpq	$0, 16(%rbx)
	jle	.L95
	movl	$1, %edx
	.p2align 4,,10
	.p2align 3
.L93:
	movq	16(%rbx,%rdx,8), %rcx
	movq	%rcx, 16(%rax,%rdx,8)
	movq	%rdx, %rcx
	addq	$1, %rdx
	cmpq	16(%rbx), %rcx
	jl	.L93
.L95:
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE73:
	.size	Object.copy, .-Object.copy
	.section	.text.unlikely
.LCOLDE20:
	.text
.LHOTE20:
	.section	.text.unlikely
.LCOLDB21:
	.text
.LHOTB21:
	.p2align 4,,15
	.globl	String.new
	.type	String.new, @function
String.new:
.LFB75:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$32, %edi
	call	getmem
	movq	$2, (%rax)
	movq	$String_vtable, 8(%rax)
	movq	$1, 16(%rax)
	movq	$.LC6, 24(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE75:
	.size	String.new, .-String.new
	.section	.text.unlikely
.LCOLDE21:
	.text
.LHOTE21:
	.section	.text.unlikely
.LCOLDB22:
	.text
.LHOTB22:
	.p2align 4,,15
	.globl	IO.in_string
	.type	IO.in_string, @function
IO.in_string:
.LFB65:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movl	$32, %edi
	call	getmem
	movq	%rax, %rbx
	movq	$2, (%rax)
	movq	$String_vtable, 8(%rax)
	movq	$1, 16(%rax)
	movq	$.LC6, 24(%rax)
	xorl	%eax, %eax
	call	in_string
	movq	%rax, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE65:
	.size	IO.in_string, .-IO.in_string
	.section	.text.unlikely
.LCOLDE22:
	.text
.LHOTE22:
	.section	.text.unlikely
.LCOLDB23:
	.text
.LHOTB23:
	.p2align 4,,15
	.globl	Object.type_name
	.type	Object.type_name, @function
Object.type_name:
.LFB72:
	.cfi_startproc
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	8(%rdi), %rdx
	movq	(%rdx), %rax
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE72:
	.size	Object.type_name, .-Object.type_name
	.section	.text.unlikely
.LCOLDE23:
	.text
.LHOTE23:
	.section	.text.unlikely
.LCOLDB24:
	.text
.LHOTB24:
	.p2align 4,,15
	.globl	String.concat
	.type	String.concat, @function
String.concat:
.LFB77:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movq	%rsi, %rbp
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	movq	24(%rdi), %r13
	movq	%r13, %rdi
	call	strlen
	movq	24(%rbp), %r12
	movq	%rax, %rbx
	movq	%r12, %rdi
	call	strlen
	leal	1(%rbx,%rax), %edi
	movslq	%edi, %rdi
	call	malloc
	movq	%rbx, %rdx
	movq	%rax, %rbp
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	memcpy
	leaq	0(%rbp,%rbx), %rdi
	movq	%r12, %rsi
	call	strcpy
	movl	$32, %edi
	call	getmem
	movq	$2, (%rax)
	movq	$String_vtable, 8(%rax)
	movq	$1, 16(%rax)
	movq	%rbp, 24(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE77:
	.size	String.concat, .-String.concat
	.section	.text.unlikely
.LCOLDE24:
	.text
.LHOTE24:
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC25:
	.string	"ERROR: %lld: Exception: String index out of bounds"
	.section	.text.unlikely
.LCOLDB26:
	.text
.LHOTB26:
	.p2align 4,,15
	.globl	String.substr
	.type	String.substr, @function
String.substr:
.LFB78:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movq	%rdi, %r13
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movq	%rsi, %rbp
	movq	%rdx, %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	movq	24(%rdi), %rdi
	call	strlen
	movq	%rbp, %rdx
	shrq	$63, %rdx
	testb	%dl, %dl
	jne	.L106
	movq	%rbx, %rdx
	shrq	$63, %rdx
	testb	%dl, %dl
	jne	.L106
	leaq	0(%rbp,%rbx), %rdx
	cltq
	cmpq	%rax, %rdx
	jg	.L106
	movl	$32, %edi
	call	getmem
	leaq	1(%rbx), %rdi
	movq	$2, (%rax)
	movq	$String_vtable, 8(%rax)
	movq	$1, 16(%rax)
	movq	$.LC6, 24(%rax)
	movq	%rax, %r12
	call	malloc
	testq	%rbx, %rbx
	je	.L110
	movq	%rbp, %rsi
	addq	24(%r13), %rsi
	xorl	%ecx, %ecx
	.p2align 4,,10
	.p2align 3
.L109:
	movzbl	(%rsi,%rcx), %edi
	movb	%dil, (%rax,%rcx)
	addq	$1, %rcx
	cmpq	%rcx, %rbx
	jne	.L109
.L110:
	movb	$0, (%rax,%rbx)
	movq	%rax, 24(%r12)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	movq	%r12, %rax
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
.L106:
	.cfi_restore_state
	xorl	%esi, %esi
	movl	$.LC25, %edi
	call	out_error
	.cfi_endproc
.LFE78:
	.size	String.substr, .-String.substr
	.section	.text.unlikely
.LCOLDE26:
	.text
.LHOTE26:
	.section	.text.unlikely
.LCOLDB27:
	.text
.LHOTB27:
	.p2align 4,,15
	.globl	Int.new
	.type	Int.new, @function
Int.new:
.LFB80:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$32, %edi
	call	getmem
	movq	$1, (%rax)
	movq	$Int_vtable, 8(%rax)
	movq	$1, 16(%rax)
	movq	$0, 24(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE80:
	.size	Int.new, .-Int.new
	.section	.text.unlikely
.LCOLDE27:
	.text
.LHOTE27:
	.section	.text.unlikely
.LCOLDB28:
	.text
.LHOTB28:
	.p2align 4,,15
	.globl	Bool.new
	.type	Bool.new, @function
Bool.new:
.LFB81:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$32, %edi
	call	getmem
	movq	$4, (%rax)
	movq	$Bool_vtable, 8(%rax)
	movq	$1, 16(%rax)
	movq	$0, 24(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE81:
	.size	Bool.new, .-Bool.new
	.section	.text.unlikely
.LCOLDE28:
	.text
.LHOTE28:
	.section	.text.unlikely
.LCOLDB29:
	.section	.text.startup,"ax",@progbits
.LHOTB29:
	.p2align 4,,15
	.globl	main
	.type	main, @function
main:
.LFB83:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$4194304, %edi
	call	malloc
	movq	%rax, HEAP_NEXT(%rip)
	addq	$4194304, %rax
	movq	%rax, HEAP_END(%rip)
	xorl	%eax, %eax
	call	_main
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE83:
	.size	main, .-main
	.section	.text.unlikely
.LCOLDE29:
	.section	.text.startup
.LHOTE29:
	.globl	HEAP_END
	.bss
	.align 8
	.type	HEAP_END, @object
	.size	HEAP_END, 8
HEAP_END:
	.zero	8
	.globl	HEAP_NEXT
	.align 8
	.type	HEAP_NEXT, @object
	.size	HEAP_NEXT, 8
HEAP_NEXT:
	.zero	8
	.globl	HEAP_SIZE
	.section	.rodata
	.align 4
	.type	HEAP_SIZE, @object
	.size	HEAP_SIZE, 4
HEAP_SIZE:
	.long	4194304
	.ident	"GCC: (Ubuntu 5.3.1-14ubuntu2) 5.3.1 20160413"
	.section	.note.GNU-stack,"",@progbits
